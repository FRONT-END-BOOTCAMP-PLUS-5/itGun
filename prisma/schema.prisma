// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  none
  male
  female
}

enum CalIconType {
  cardio
  upper
  lower
}

enum BodyPart {
  face
  arms
  legs
  torso
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  nickName        String  @map("nick_name")
  password        String
  age             Int?
  gender          Gender?
  height          Float?
  weight          Float?
  isSocialLogin   Boolean  @default(false) @map("is_social_login")
  characterColor  String  @map("character_color") @default("#fdfdfd")
  characterId     Int     @map("character_id") @default(1)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  userBadges           UserBadge[]
  bodyPartGauges       BodyPartGauge[]
  logs                 Log[]
  benchPressRecords    BenchPressRecord[]
  deadliftRecords      DeadliftRecord[]
  squatRecords         SquatRecord[]
  bigThreeRecords      BigThreeRecord[]
  runningRecords       RunningRecord[]

  @@map("users")
}

model CharacterAsset {
  id       Int      @id @default(autoincrement())
  level    Int      @default(1)
  type     String   @map("type")
  svg      String   @db.Text
  characterId Int   @map("character_id")

  @@map("character_assets")
}

model Badge {
  id             Int    @id @default(autoincrement())
  name           String
  expirationDays Int?   @map("expiration_days")
  description    String

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  badgeId   Int      @map("badge_id")
  userId    String   @map("user_id")
  earnedAt  DateTime @default(now()) @map("earned_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_badges")
}

model BodyPartGauge {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  arms      Float?   @default(0)
  legs      Float?   @default(0)
  shoulders Float?   @default(0)
  back      Float?   @default(0)
  chest     Float?   @default(0)
  core      Float?   @default(0)
  stamina   Float?   @default(0)
  earnedAt  DateTime @default(now()) @map("earned_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("body_part_gauges")
}

model Log {
  id            Int         @id @default(autoincrement())
  userId        String      @map("user_id")
  calIconType   CalIconType @map("cal_icon_type")
  totalDuration Int         @map("total_duration") // 분 단위
  gaugeChanges  Json?       @map("gauge_changes") // 게이지 변화 데이터
  logDate       DateTime    @default(now()) @map("log_date")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  logWorkouts LogWorkout[]

  @@map("logs")
}

model LogWorkout {
  id        Int     @id @default(autoincrement())
  logId     Int      @map("log_id")
  workoutId Int      @map("workout_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  log     Log     @relation(fields: [logId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("log_workouts")
}

model Workout {
  id               Int    @id @default(autoincrement())
  seq              Int
  exerciseName     String @map("exercise_name")
  setCount         Int     @map("set_count")
  weight           Int?
  repetitionCount  Int?   @map("repetition_count")
  distance         Int?
  durationSeconds  Int?   @map("duration_seconds")

  // Relations
  logWorkouts LogWorkout[]

  @@map("workouts")
}

model BenchPressRecord {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  weight     Float
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bench_press_records")
}

model DeadliftRecord {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  weight     Float
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dead_lift_records")
}

model SquatRecord {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  weight     Float
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sqaut_records")
}

model BigThreeRecord {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  weight     Float
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("big_three_records")
}

model RunningRecord {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @map("user_id")
  distance   Float
  earnedAt   DateTime @default(now()) @map("earned_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("running_records")
}

model Exercise {
  id                 String   @id @map("exercise_id")
  name               String
  nameKo             String   @map("name_ko")
  imageUrl           String   @map("image_url")
  videoUrl           String   @map("video_url")
  equipments         String[]
  equipmentsKo       String[] @map("equipments_ko")
  bodyParts          String[] @map("body_parts")
  bodyPartsKo        String[] @map("body_parts_ko")
  exerciseType       String   @map("exercise_type")
  keywords           String[]
  keywordsKo         String[] @map("keywords_ko")
  overview           String   @db.Text
  overviewKo         String   @map("overview_ko") @db.Text
  instructions       String[]
  instructionsKo     String[] @map("instructions_ko")
  exerciseTips       String[] @map("exercise_tips") @db.Text
  exerciseTipsKo     String[] @map("exercise_tips_ko")  @db.Text
  variations         String[] @db.Text
  relatedExerciseIds String[] @map("related_exercise_ids")

  @@map("exercises")
}
